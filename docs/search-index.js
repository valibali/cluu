var searchIndex = JSON.parse('{\
"cluu_kernel_rust":{"doc":"","t":"FAAOOOFOOOFAAOFAAHHAFADLLLMLLLMMLLLMSSDDSSSSDLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLMLMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLDRRRRRRRRRRRRRRRRRRDRRRRHMMMMMDTDHLLLLLLLLLLLLMMLLLLLLMMMHHMMMMMMMLLLLLLLLLLMMMMMLLLLLLMMMMMMMMDMMMMMLLLLLLLLLLLLLLLLLLMMMMMMMMMMMMAAIDQDLLLLLLMMLLLLKLLLLLLLLLKLLLDLLLLLLMLLLLLLMLLLAAADHLLLLLFLLLLLDLLLLLMLLLLL","n":["_start","arch","bootboot","debug","error","info","panic","print","serial_clearcls","serial_println","set_max_level","syscall","utils","warn","kstart","x86_64","peripheral","COM2","FB","framebuffer","init_peripherals","uart_16550","FrameBuffer","borrow","borrow_mut","from","height","into","new","puts","scanline","screen","try_from","try_into","type_id","width","ERRORED","INPUT_FULL","IntEnFlags","LineStsFlags","OUTPUT_EMPTY","RECEIVED","SENT","STATUS_CHANGE","SerialPort","all","all","bitand","bitand","bitand_assign","bitand_assign","bitor","bitor","bitor_assign","bitor_assign","bits","bits","bits","bits","bitxor","bitxor","bitxor_assign","bitxor_assign","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","complement","complement","contains","contains","data","difference","difference","empty","empty","extend","extend","fifo_ctrl","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from_bits","from_bits","from_bits_retain","from_bits_retain","from_bits_retain","from_bits_retain","from_bits_truncate","from_bits_truncate","from_iter","from_iter","from_name","from_name","init","insert","insert","int_en","intersection","intersection","intersects","intersects","into","into","into","into_iter","into_iter","is_all","is_all","is_empty","is_empty","iter","iter","iter_names","iter_names","line_ctrl","line_sts","line_sts","modem_ctrl","modem_sts","new","not","not","remove","remove","send","set","set","sub","sub","sub_assign","sub_assign","symmetric_difference","symmetric_difference","toggle","toggle","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","union","union","write","BOOTBOOT","BOOTBOOT_CORE","BOOTBOOT_ENV","BOOTBOOT_FB","BOOTBOOT_INFO","BOOTBOOT_MAGIC","BOOTBOOT_MMIO","FB_ABGR","FB_ARGB","FB_BGRA","FB_RGBA","INITRD_MAXSIZE","LOADER_BIOS","LOADER_RPI","LOADER_UEFI","MMAP_ACPI","MMAP_FREE","MMAP_MMIO","MMAP_USED","MMapEnt","PROTOCOL_BIGENDIAN","PROTOCOL_DYNAMIC","PROTOCOL_MINIMAL","PROTOCOL_STATIC","_binary_font_psf_start","_bindgen_union_align","aarch64","acpi_ptr","acpi_ptr","arch","arch_aarch64","arch_union","arch_x86","bootboot","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bspid","bytesperglyph","clone","clone","clone","clone","clone","clone","datetime","efi_ptr","efi_ptr","environment","fb","fb_height","fb_ptr","fb_scanline","fb_size","fb_type","fb_width","flags","fmt","fmt","fmt","fmt","from","from","from","from","from","from","glyphs","headersize","height","initrd_ptr","initrd_size","into","into","into","into","into","into","magic","magic","mmap","mmio_ptr","mp_ptr","numcores","numglyph","protocol","psf2_t","ptr","size","size","smbi_ptr","timezone","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","unused0","unused0","unused1","unused1","unused2","unused2","unused3","unused3","unused4","version","width","x86_64","io","pio","Io","ReadOnly","Value","WriteOnly","borrow","borrow","borrow_mut","borrow_mut","from","from","inner","inner","into","into","new","new","read","read","readf","readf","try_from","try_from","try_into","try_into","type_id","type_id","write","write","writef","writef","Pio","borrow","borrow_mut","clone","from","into","new","port","read","read","read","try_from","try_into","type_id","value","write","write","write","logger","macros","writer","CluuLogger","LOGGER","borrow","borrow_mut","enabled","flush","from","init","into","log","try_from","try_into","type_id","Writer","borrow","borrow_mut","from","into","new","serial","try_from","try_into","type_id","write","write_str"],"q":[[0,"cluu_kernel_rust"],[14,"cluu_kernel_rust::arch"],[16,"cluu_kernel_rust::arch::x86_64"],[17,"cluu_kernel_rust::arch::x86_64::peripheral"],[22,"cluu_kernel_rust::arch::x86_64::peripheral::framebuffer"],[36,"cluu_kernel_rust::arch::x86_64::peripheral::uart_16550"],[158,"cluu_kernel_rust::bootboot"],[289,"cluu_kernel_rust::syscall"],[291,"cluu_kernel_rust::syscall::io"],[321,"cluu_kernel_rust::syscall::pio"],[339,"cluu_kernel_rust::utils"],[342,"cluu_kernel_rust::utils::logger"],[355,"cluu_kernel_rust::utils::writer"]],"d":["Entry point, called by BOOTBOOT Loader *","","","Logs a message at the debug level.","Logs a message at the error level.","Logs a message at the info level.","Custom panic handler that prints the error message and …","Prints formatted text to the console using the <code>Writer</code> …","Clears the console screen.","Prints a formatted string followed by a new line to the …","Sets the global maximum log level.","","","Logs a message at the warn level.","Starts the kernel.","","","Mutex-protected static instance of COM2 serial port.","Mutex-protected static instance of the framebuffer.","","Initializes the peripherals.","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","Display text on the screen using the PC Screen Font.","","","","","","","","","Interrupt enable flags","Line status flags","","","","","Serial port representation.","Returns the set containing all flags.","Returns the set containing all flags.","Returns the intersection between the two sets of flags.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Returns the union of the two sets of flags.","Adds the set of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","","","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags …","Returns the left flags, but with all the right flags …","Toggles the set of flags.","Toggles the set of flags.","","","","","","","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns an empty set of flags.","Returns an empty set of flags.","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, unless that …","","Convert from underlying bit representation, preserving all …","Convert from underlying bit representation, preserving all …","","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, dropping any …","","","Get the value for a flag from its stringified name.","Get the value for a flag from its stringified name.","Initializes the serial port.","Inserts the specified flags in-place.","Inserts the specified flags in-place.","","Returns the intersection between the flags in <code>self</code> and …","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","Returns <code>true</code> if no flags are currently stored.","Iterate over enabled flag values.","Iterate over enabled flag values.","Iterate over enabled flag values with their stringified …","Iterate over enabled flag values with their stringified …","","Retrieves the line status flags.","","","","Creates a new serial port instance.","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Removes the specified flags in-place.","Removes the specified flags in-place.","Sends a byte of data through the serial port.","Inserts or removes the specified flags depending on the …","Inserts or removes the specified flags depending on the …","Returns the set difference of the two sets of flags.","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Disables all flags enabled in the set.","Returns the symmetric difference between the flags in <code>self</code> …","Returns the symmetric difference between the flags in <code>self</code> …","Toggles the specified flags in-place.","Toggles the specified flags in-place.","","","","","","","","","","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Writes a byte of data to the serial port.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","Display text on screen *","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Represents an I/O interface.","Wrapper for an I/O interface providing read-only access.","The value type used for I/O operations.","Wrapper for an I/O interface providing write-only access.","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Creates a new <code>ReadOnly</code> wrapper instance.","Creates a new <code>WriteOnly</code> wrapper instance.","Reads the value from the I/O interface.","Reads the value from the I/O interface.","Reads the value from the I/O interface and checks if the …","Reads the value from the I/O interface and checks if the …","","","","","","","Writes the value to the I/O interface.","Writes the value to the I/O interface.","Writes the value to the I/O interface based on the …","Writes the value to the I/O interface based on the …","Generic PIO","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Create a new PIO instance with the specified port.","","Read a byte from the port.","Read a word from the port.","Read a doubleword from the port.","","","","","Write a doubleword to the port.","Write a byte to the port.","Write a word to the port.","","","","Custom logger implementation for CluuLogger.","The CluuLogger instance used for logging.","","","Checks if the given log level is enabled.","Flushes the logger (no-op in this case).","Returns the argument unchanged.","Initializes the logger and optionally clears the screen.","Calls <code>U::from(self)</code>.","Logs the record by printing it to the console.","","","","A simple writer that writes to the serial port.","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Creates a new instance of the writer.","","","","","Writes a byte to the serial port.","Writes a string to the serial port."],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,5,5,5,5,5,5,5,5,5,5,5,9,10,0,0,10,9,9,9,0,9,10,9,10,9,10,9,10,9,10,9,9,10,10,9,10,9,10,18,9,10,18,9,10,9,10,9,10,18,9,10,9,10,9,10,18,9,9,9,9,10,10,10,10,18,9,10,9,10,9,9,10,10,9,10,9,10,9,10,18,9,10,18,9,10,9,10,18,9,10,9,10,9,10,9,10,9,10,9,10,18,18,18,18,18,18,9,10,9,10,18,9,10,9,10,9,10,9,10,9,10,18,9,10,18,9,10,18,9,10,9,10,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,25,25,26,27,24,0,0,0,0,23,24,25,26,27,28,23,24,25,26,27,28,24,28,23,24,25,26,27,28,24,26,27,0,0,24,24,24,24,24,24,28,23,26,27,28,23,24,25,26,27,28,28,28,28,24,24,23,24,25,26,27,28,24,28,24,27,26,24,28,24,0,23,23,24,26,24,23,24,25,26,27,28,23,24,25,26,27,28,23,24,25,26,27,28,26,27,26,27,26,27,26,27,27,28,28,25,0,0,0,0,17,0,29,30,29,30,29,30,29,30,29,30,29,30,17,29,17,29,29,30,29,30,29,30,17,30,17,30,0,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,0,0,0,0,0,32,32,32,32,32,0,32,32,32,32,32,0,35,35,35,35,35,35,35,35,35,35,35],"f":[[[],1],0,0,0,0,0,[2,1],0,0,0,[3],0,0,0,[[],1],0,0,0,0,0,[[]],0,0,[[]],[[]],[[]],0,[[]],[[4,4,4,4],5],[[5,6]],0,0,[[],7],[[],7],[[],8],0,0,0,0,0,0,0,0,0,0,[[],9],[[],10],[[9,9],9],[[10,10],10],[[9,9]],[[10,10]],[[9,9],9],[[10,10],10],[[9,9]],[[10,10]],[9,11],[9,11],[10,11],[10,11],[[9,9],9],[[10,10],10],[[9,9]],[[10,10]],[[]],[[]],[[]],[[]],[[]],[[]],[9,9],[10,10],[[9,9],12],[[10,10],12],0,[[9,9],9],[[10,10],10],[[],9],[[],10],[[9,13]],[[10,13]],0,[[9,14],15],[[9,14],15],[[9,14],15],[[9,14],15],[[10,14],15],[[10,14],15],[[10,14],15],[[10,14],15],[[]],[[]],[[]],[11,[[16,[9]]]],[11,[[16,[10]]]],[11,9],[11,9],[11,10],[11,10],[11,9],[11,10],[13,9],[13,10],[6,[[16,[9]]]],[6,[[16,[10]]]],[[[18,[17]]]],[[9,9]],[[10,10]],0,[[9,9],9],[[10,10],10],[[9,9],12],[[10,10],12],[[]],[[]],[[]],[9],[10],[9,12],[10,12],[9,12],[10,12],[9,[[19,[9]]]],[10,[[19,[10]]]],[9,[[20,[9]]]],[10,[[20,[10]]]],0,[[[18,[17]]],10],0,0,0,[21,[[18,[[22,[11]]]]]],[9,9],[10,10],[[9,9]],[[10,10]],[[[18,[17]],11]],[[9,9,12]],[[10,10,12]],[[9,9],9],[[10,10],10],[[9,9]],[[10,10]],[[9,9],9],[[10,10],10],[[9,9]],[[10,10]],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],8],[[],8],[[],8],[[9,9],9],[[10,10],10],[[[18,[17]],11]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[23,23],[24,24],[25,25],[26,26],[27,27],[28,28],0,0,0,0,0,0,0,0,0,0,0,0,[[23,14],15],[[26,14],15],[[27,14],15],[[28,14],15],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],0,0,[[]],[[]],[[],29],[[],30],[[]],[[[29,[17]]]],[[],12],[[[29,[17]]],12],[[],7],[[],7],[[],7],[[],7],[[],8],[[],8],[[]],[[[30,[17]]]],[12],[[[30,[17]],12]],0,[[]],[[]],[[[22,[31]]],[[22,[31]]]],[[]],[[]],[21,22],0,[[[22,[11]]],11],[[[22,[21]]],21],[[[22,[4]]],4],[[],7],[[],7],[[],8],0,[[[22,[4]],4]],[[[22,[11]],11]],[[[22,[21]],21]],0,0,0,0,0,[[]],[[]],[[32,33],12],[32],[[]],[12],[[]],[[32,34]],[[],7],[[],7],[[],8],0,[[]],[[]],[[]],[[]],[[],35],0,[[],7],[[],7],[[],8],[[35,11]],[[35,6],15]],"c":[],"p":[[15,"never"],[3,"PanicInfo"],[4,"LevelFilter"],[15,"u32"],[3,"FrameBuffer"],[15,"str"],[4,"Result"],[3,"TypeId"],[3,"IntEnFlags"],[3,"LineStsFlags"],[15,"u8"],[15,"bool"],[8,"IntoIterator"],[3,"Formatter"],[6,"Result"],[4,"Option"],[8,"Io"],[3,"SerialPort"],[3,"Iter"],[3,"IterNames"],[15,"u16"],[3,"Pio"],[3,"MMapEnt"],[3,"BOOTBOOT"],[19,"arch_union"],[3,"arch_x86"],[3,"arch_aarch64"],[3,"psf2_t"],[3,"ReadOnly"],[3,"WriteOnly"],[8,"Clone"],[3,"CluuLogger"],[3,"Metadata"],[3,"Record"],[3,"Writer"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
